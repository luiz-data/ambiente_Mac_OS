## **Comandos da Aula - MacOS**

### **Configura√ß√£o do Git**

Crie um novo reposit√≥rio ou clone um j√° existente e fa√ßa o seu primeiro commit para versionar o projeto.

1.  **Verificar se o Git est√° instalado:**
    ```bash
    git --version
    ```
    *Se n√£o estiver instalado, o MacOS solicitar√° a instala√ß√£o das ferramentas de linha de comando do Xcode.*

2.  **Clonar o reposit√≥rio:**
    ```bash
    git clone git@github.com:GeovanyADCancio/aulas_empregadados.git
    ```
    *Ou, se preferir criar um novo:*
    ```bash
    git init
    ```

3.  **Acessar a pasta do projeto:**
    ```bash
    cd aulas_empregadados
    ```

4.  **Adicionar e salvar arquivos (`commit`):**
    ```bash
    git add .
    git commit -m "Adicionando o arquivo README."
    ```

5.  **Enviar as altera√ß√µes para o reposit√≥rio remoto:**
    ```bash
    git push origin main
    ```

6.  **Verificar o hist√≥rico de commits:**
    ```bash
    git log
    ```

7.  **Gerenciar branches para novas funcionalidades:**
    ```bash
    git branch dev
    git checkout dev
    git merge main
    ```

---

### **Ambiente Virtual Python (`venv`)**

Configure um ambiente virtual para isolar as depend√™ncias do seu projeto.

1.  **Verificar a vers√£o do Python:**
    ```bash
    python3 --version
    ```
    *O MacOS vem com Python 3 pr√©-instalado. Se necess√°rio, instale via Homebrew:*
    ```bash
    brew install python3
    ```

2.  **Criar o ambiente virtual:**
    ```bash
    python3 -m venv venv
    ```

3.  **Ativar o ambiente virtual:**
    ```bash
    source venv/bin/activate
    ```
    *Para desativar o ambiente virtual:*
    ```bash
    deactivate
    ```

4.  **Gerar o arquivo de depend√™ncias (`requirements.txt`):**
    ```bash
    pip freeze > requirements.txt
    ```

5.  **Instalar depend√™ncias (se o arquivo `requirements.txt` j√° existir):**
    ```bash
    pip install -r requirements.txt
    ```

---

### **PostgreSQL no MacOS**

Siga estes passos para instalar e configurar o PostgreSQL nativamente no MacOS usando Homebrew.

#### **Instala√ß√£o do Homebrew (se ainda n√£o tiver)**

1.  **Instalar o Homebrew:**
    ```bash
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    ```

2.  **Verificar a instala√ß√£o:**
    ```bash
    brew --version
    ```

#### **Instala√ß√£o e In√≠cio do PostgreSQL**

1.  **Instalar o PostgreSQL:**
    ```bash
    brew install postgresql@16
    ```

2.  **Iniciar o servi√ßo do PostgreSQL:**
    ```bash
    brew services start postgresql@16
    ```
    *Para parar o servi√ßo:*
    ```bash
    brew services stop postgresql@16
    ```
    *Para verificar o status:*
    ```bash
    brew services list
    ```

3.  **Adicionar o PostgreSQL ao PATH (se necess√°rio):**
    ```bash
    echo 'export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"' >> ~/.zshrc
    source ~/.zshrc
    ```
    *Se voc√™ usar bash ao inv√©s de zsh, substitua `~/.zshrc` por `~/.bash_profile`*

#### **Configura√ß√£o de Usu√°rio e Banco de Dados**

1.  **Acessar o terminal interativo do PostgreSQL (`psql`):**
    ```bash
    psql postgres
    ```
    *Ou, se preferir acessar com o usu√°rio padr√£o:*
    ```bash
    psql -d postgres
    ```

2.  **Criar o usu√°rio `geovany`:**
    ```sql
    CREATE USER geovany WITH SUPERUSER CREATEDB CREATEROLE LOGIN ENCRYPTED PASSWORD '123456789';
    ```

3.  **Criar o banco de dados `analise_funcionarios` e definir o propriet√°rio:**
    ```sql
    CREATE DATABASE analise_funcionarios OWNER geovany;
    ```

4.  **Conceder permiss√µes ao novo banco de dados:**
    ```sql
    GRANT ALL PRIVILEGES ON DATABASE analise_funcionarios TO geovany;
    ```

5.  **Sair do psql:**
    ```sql
    \q
    ```

#### **Configura√ß√£o para Acesso de Aplica√ß√µes**

Por padr√£o, o PostgreSQL no MacOS j√° aceita conex√µes locais. Caso precise ajustar:

1.  **Localizar o arquivo de configura√ß√£o:**
    ```bash
    psql -d postgres -c "SHOW config_file;"
    ```

2.  **Editar o arquivo `postgresql.conf` (opcional):**
    ```bash
    nano /opt/homebrew/var/postgresql@16/postgresql.conf
    ```
    *O caminho pode variar. Use o resultado do comando anterior.*

    * Verifique se a linha `listen_addresses` est√° configurada:
        ```
        listen_addresses = 'localhost'
        ```
    *Para aceitar conex√µes externas (cuidado com seguran√ßa):*
        ```
        listen_addresses = '*'
        ```

3.  **Editar o arquivo `pg_hba.conf` (opcional):**
    ```bash
    nano /opt/homebrew/var/postgresql@16/pg_hba.conf
    ```

    * Adicione ou verifique se existe a linha para conex√µes locais:
        ```
        host    all             all             127.0.0.1/32            md5
        ```

4.  **Reiniciar o servi√ßo do PostgreSQL para aplicar as altera√ß√µes:**
    ```bash
    brew services restart postgresql@16
    ```

#### **Testando a Conex√£o**

1.  **Conectar com o novo usu√°rio:**
    ```bash
    psql -U geovany -d analise_funcionarios -h localhost
    ```
    *Digite a senha quando solicitado: `123456789`*

2.  **Verificar a conex√£o:**
    ```sql
    SELECT version();
    ```

---

### **Conectando com DBeaver ou pgAdmin**

Use as seguintes credenciais para conectar suas ferramentas de gerenciamento:

* **Host:** `localhost`
* **Porta:** `5432`
* **Database:** `analise_funcionarios`
* **Usu√°rio:** `geovany`
* **Senha:** `123456789`

---

### **Comandos √öteis do PostgreSQL no MacOS**

* **Iniciar PostgreSQL automaticamente no boot:**
    ```bash
    brew services start postgresql@16
    ```

* **Parar o servi√ßo:**
    ```bash
    brew services stop postgresql@16
    ```

* **Reiniciar o servi√ßo:**
    ```bash
    brew services restart postgresql@16
    ```

* **Ver logs do PostgreSQL:**
    ```bash
    tail -f /opt/homebrew/var/log/postgresql@16.log
    ```

* **Listar todos os bancos de dados:**
    ```bash
    psql -U geovany -d postgres -c "\l"
    ```

---

### **Observa√ß√µes Importantes**

* **Firewall:** O MacOS geralmente n√£o bloqueia conex√µes locais por padr√£o. N√£o √© necess√°rio configurar firewall para uso local.
* **Caminhos:** Os caminhos podem variar entre Macs Intel (`/usr/local/`) e Macs com Apple Silicon (`/opt/homebrew/`).
* **Seguran√ßa:** Em ambiente de produ√ß√£o, nunca use senhas simples como `123456789`.


1Ô∏è‚É£ Em ambiente MacOS preciso do WSL?
N√ÉO! Definitivamente n√£o precisa!
Por qu√™?

WSL = Windows Subsystem for Linux (√© uma camada Linux dentro do Windows)
MacOS j√° √© Unix-based (baseado em BSD/Unix)
No Mac voc√™ j√° tem terminal Unix nativo, ent√£o roda tudo direto!

Resumo:

Windows ‚Üí Precisa de WSL para rodar PostgreSQL/ferramentas Linux
MacOS/Linux ‚Üí Roda tudo nativamente, sem WSL

√â como se o Mac j√° tivesse o "WSL embutido" por natureza! üçé

2Ô∏è‚É£ O que √© mais comum no mercado de an√°lise de dados: Visual Studio Code ou Google Colab?
Depende do tipo de trabalho, mas:
üè¢ Mercado corporativo/empresas:
VS Code + Jupyter Notebooks locais (70-80%)

Projetos estruturados, com Git
Dados sens√≠veis (n√£o podem ir pra nuvem)
Integra√ß√£o com bancos de dados internos
Pipelines de produ√ß√£o

üéì Academia/Pesquisa/Prototipagem:
Google Colab (muito usado)

Pesquisa r√°pida
Compartilhar an√°lises
Usar GPU gr√°tis (deep learning)
Ensino/tutoriais

üìä Realidade pr√°tica:
A maioria dos analistas de dados usa:

VS Code (ou PyCharm/Jupyter Lab) para desenvolvimento
Google Colab para testes r√°pidos ou compartilhar algo pontual

3Ô∏è‚É£ O que √© processo?
Em computa√ß√£o, um processo √©:
üîπ Defini√ß√£o simples: Um programa em execu√ß√£o na mem√≥ria do computador.
Exemplo pr√°tico:

Voc√™ abre o PostgreSQL ‚Üí cria um processo do banco de dados
Voc√™ roda um script Python ‚Üí cria um processo Python
Cada aba do navegador ‚Üí um processo separado

Caracter√≠sticas:

Tem seu pr√≥prio espa√ßo de mem√≥ria
Pode criar sub-processos (threads)
Sistema operacional gerencia (CPU, mem√≥ria)

No contexto da aula:
Quando voc√™ faz sudo service postgresql start, est√° iniciando o processo do PostgreSQL que fica rodando em background esperando conex√µes.

4Ô∏è‚É£ O que √© processo?
Em computa√ß√£o, um processo √©:
üîπ Defini√ß√£o simples: Um programa em execu√ß√£o na mem√≥ria do computador.
Exemplo pr√°tico:

Voc√™ abre o PostgreSQL ‚Üí cria um processo do banco de dados
Voc√™ roda um script Python ‚Üí cria um processo Python
Cada aba do navegador ‚Üí um processo separado

Caracter√≠sticas:

Tem seu pr√≥prio espa√ßo de mem√≥ria
Pode criar sub-processos (threads)
Sistema operacional gerencia (CPU, mem√≥ria)

No contexto da aula:
Quando voc√™ faz sudo service postgresql start, est√° iniciando o processo do PostgreSQL que fica rodando em background esperando conex√µes.

5Ô∏è‚É£ Qual a arquitetura do PostgreSQL?
O PostgreSQL tem uma arquitetura cliente-servidor:


Componentes principais:

* Postmaster: Processo principal que gerencia conex√µes
* Backend processes: Cada conex√£o de cliente cria um processo separado
* Shared Memory: √Årea compartilhada (cache, buffers)
* WAL (Write-Ahead Log): Sistema de recupera√ß√£o/transa√ß√µes
* Storage: Arquivos f√≠sicos no disco

Por isso na aula voc√™:

* Configura listen_addresses = '*' ‚Üí permite conex√µes externas
* Libera firewall ‚Üí deixa a porta 5432 acess√≠vel
* Cria usu√°rio/banco ‚Üí define permiss√µes de acesso
